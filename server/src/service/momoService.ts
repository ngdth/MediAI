import axios from 'axios';
import crypto from 'crypto';
import { Request, Response } from 'express';
import Bill from '../models/Bill';  // ƒê·∫£m b·∫£o b·∫°n ƒë√£ import ƒë√∫ng model Bill
import Appointment from '../models/Appointment';
import { sendEmail } from '../config/email';

const accessKey = 'F8BBA842ECF85';
const secretKey = 'K951B6PE1waDMi640xX08PD3vg6EkVlz';
interface MomoResponse {
    resultCode: number;
    message: string;
    payUrl?: string;
    orderId?: string;
    requestId?: string;
}

// üöÄ H√†m t·∫°o thanh to√°n
export const createPayment = async (req: Request, res: Response): Promise<void> => {
    try {
        const { _id } = req.body;

        // üîç Ki·ªÉm tra `_id` h·ª£p l·ªá
        if (!_id) {
            console.log("Thi·∫øu _id trong request!");
            res.status(400).json({ message: "_id is required" });
            return;
        }

        // T√¨m h√≥a ƒë∆°n d·ª±a tr√™n `_id`
        const bill = await Bill.findById(_id);

        if (!bill) {
            console.log("Kh√¥ng t√¨m th·∫•y h√≥a ƒë∆°n v·ªõi _id:", _id);
            res.status(404).json({ message: "Bill not found for this _id." });
            return;
        }

        const amount = bill.totalAmount; // L·∫•y t·ªïng s·ªë ti·ªÅn t·ª´ h√≥a ƒë∆°n
        const orderInfo = 'Thanh to√°n qua MoMo';
        const partnerCode = 'MOMO';
        // const redirectUrl = 'http://localhost:5173/payment';  // URL th√†nh c√¥ng (c√≥ th·ªÉ thay ƒë·ªïi)
        const redirectUrl = req.body.redirectUrl;
        const ipnUrl = 'https://api.amma-care.com/payment/callback';  // C·∫≠p nh·∫≠t l·∫°i ngrok n·∫øu c·∫ßn
        // const requestType = "payWithMethod";
        const requestType = req.body.requestType;
        const orderId = `${partnerCode}_${_id}_${Date.now()}`;
        const requestId = `${_id}`;
        const extraData = '';
        const autoCapture = true;
        const lang = 'vi';

        // üîí T·∫°o ch·ªØ k√Ω HMAC SHA256
        const rawSignature = `accessKey=${accessKey}&amount=${amount}&extraData=${extraData}&ipnUrl=${ipnUrl}&orderId=${orderId}&orderInfo=${orderInfo}&partnerCode=${partnerCode}&redirectUrl=${redirectUrl}&requestId=${requestId}&requestType=${requestType}`;
        const signature = crypto.createHmac('sha256', secretKey).update(rawSignature).digest('hex');

        // üì© Chu·∫©n b·ªã request g·ª≠i t·ªõi MoMo
        const requestBody = {
            partnerCode,
            partnerName: "Test",
            storeId: "MomoTestStore",
            requestId,
            amount,
            orderId,
            orderInfo,
            redirectUrl,
            ipnUrl,
            lang,
            requestType,
            autoCapture,
            extraData,
            signature
        };

        console.log("G·ª≠i y√™u c·∫ßu thanh to√°n ƒë·∫øn MOMO:", requestBody);

        // üì° G·ª≠i y√™u c·∫ßu ƒë·∫øn MoMo API (S·ª≠ d·ª•ng Generic `<MomoResponse>` ƒë·ªÉ √©p ki·ªÉu)
        const response = await axios.post<MomoResponse>('https://test-payment.momo.vn/v2/gateway/api/create', requestBody, {
            headers: { 'Content-Type': 'application/json' }
        });

        const responseData: MomoResponse = response.data; // √âp ki·ªÉu ch√≠nh x√°c

        console.log("Ph·∫£n h·ªìi c·ªßa MOMO:", responseData);

        // N·∫øu t·∫°o thanh to√°n th√†nh c√¥ng, tr·∫£ v·ªÅ `payUrl`
        if (responseData.resultCode === 0) {
            res.status(200).json({
                message: "T·∫°o thanh to√°n th√†nh c√¥ng",
                payUrl: responseData.payUrl, // URL ƒë·ªÉ kh√°ch h√†ng thanh to√°n MoMo
                orderId: responseData.orderId,
                requestId: responseData.requestId,
                resultCode: responseData.resultCode
            });
        } else {
            console.log("L·ªói khi t·∫°o thanh to√°n MoMo:", responseData);
            res.status(400).json({
                message: "L·ªói khi t·∫°o thanh to√°n",
                error: responseData.message
            });
        }
    } catch (error: any) {
        console.error("L·ªói khi g·ªçi API MoMo:", error?.response?.data || error.message);
        res.status(500).json({ message: "L·ªói m√°y ch·ªß", error: error.message });
    }
};


// H√†m x·ª≠ l√Ω callback t·ª´ MoMo
export const paymentCallback = async (req: Request, res: Response): Promise<void> => {
    try {
        console.log("Callback ƒë√£ nh·∫≠n t·ª´ MoMo:", req.body);
        if (!req.body || typeof req.body !== 'object') {
            console.log("Request body kh√¥ng h·ª£p l·ªá");
            res.status(400).json({ message: "Request body kh√¥ng h·ª£p l·ªá" });
            return;
        }

        const { resultCode, requestId } = req.body;

        // if (!resultCode || !billId) {
        //     console.log("Thi·∫øu `resultCode` ho·∫∑c `billId` trong callback:", req.body);
        //     res.status(400).json({
        //         message: "Thi·∫øu d·ªØ li·ªáu t·ª´ MoMo callback",
        //         resultCode: resultCode || null,
        //         billId: billId || null
        //     });
        //     return;
        // }

        if ((resultCode) === 0) {  // ‚úÖ Thanh to√°n th√†nh c√¥ng
            console.log("Thanh to√°n th√†nh c√¥ng cho Bill ID:", requestId);

            // üìå C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n c·ªßa Bill
            const updatedBill = await Bill.findOneAndUpdate(
                { _id: requestId },
                { paymentStatus: "Paid" },
                { new: true }
            );

            if (updatedBill) {
                console.log("C·∫≠p nh·∫≠t bill th√†nh c√¥ng:", updatedBill);
            } else {
                console.log("Kh√¥ng t√¨m th·∫•y h√≥a ƒë∆°n v·ªõi billId:", requestId);
                res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y bill" });
                return;
            }

            console.log("C·∫≠p nh·∫≠t bill th√†nh c√¥ng:", updatedBill);

            // üìå T√¨m th√¥ng tin l·ªãch h·∫πn (Appointment) li√™n quan
            const appointment = await Appointment.findById(updatedBill.appointmentId)
                .populate("userId", "email");

            if (!appointment || !appointment.userId) {
                console.error("Kh√¥ng t√¨m th·∫•y th√¥ng tin b·ªánh nh√¢n!");
                res.status(500).json({ message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin b·ªánh nh√¢n" });
                return;
            }

            // üì© G·ª≠i email th√¥ng b√°o cho b·ªánh nh√¢n
            const user = appointment.userId as { email?: string };
            const userEmail = user.email;
            if (!userEmail) {
                console.error("Kh√¥ng t√¨m th·∫•y email b·ªánh nh√¢n!");
                res.status(500).json({ message: "Kh√¥ng t√¨m th·∫•y email b·ªánh nh√¢n" });
                return;
            }

            console.log("ƒê√£ t√¨m th·∫•y email b·ªánh nh√¢n:", userEmail);

            await sendEmail(userEmail, updatedBill, "payment_success");
            console.log("ƒê√£ g·ª≠i email ƒë·∫øn:", userEmail);

            // Tr·∫£ v·ªÅ ph·∫£n h·ªìi th√†nh c√¥ng
            res.status(200).json({
                billId: updatedBill._id,
                paymentStatus: updatedBill.paymentStatus
            });
            return;
        }

        // N·∫øu thanh to√°n th·∫•t b·∫°i
        console.log(" Thanh to√°n th·∫•t b·∫°i. M√£ l·ªói:", resultCode);
        res.status(400).json({ message: "Thanh to√°n th·∫•t b·∫°i", resultCode });
        return;

    } catch (error) {
        console.error("L·ªói khi callback thanh to√°n:", error);
        res.status(500).json({
            message: "L·ªói m√°y ch·ªß",
            error: error instanceof Error ? error.message : "L·ªói"
        });
    }
};
