// src/controllers/appointmentController.ts
import { Request, Response, NextFunction } from 'express';
import Appointment, { AppointmentStatus } from '../../models/Appointment'
import User from '../../models/User';
import mongoose from 'mongoose';
import Schedule from '../../models/Schedule';
import { sendEmail  } from "../../config/email";

// ‚úÖ API: ƒê·∫∑t l·ªãch h·∫πn & g·ª≠i email x√°c nh·∫≠n
export const createAppointment = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
        const userId = req.user?.id;
        const { patientName, date, time, symptoms } = req.body;

        // ‚úÖ Ki·ªÉm tra input, b·ªè y√™u c·∫ßu `doctorId`
        if (!patientName || !date || !time || !symptoms) {
            res.status(400).json({ message: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin" });
            return;
        }

        // ‚úÖ T·∫°o l·ªãch h·∫πn kh√¥ng c·∫ßn `doctorId`
        const newAppointment = new Appointment({
            userId,
            patientName,
            date,
            time,
            symptoms,
            status: AppointmentStatus.PENDING
        });

        await newAppointment.save();

        // ‚úÖ L·∫•y th√¥ng tin user
        const user = await User.findById(userId);
        if (!user) {
            res.status(404).json({ message: 'User kh√¥ng t·ªìn t·∫°i' });
            return;
        }

        // üì© G·ª≠i email x√°c nh·∫≠n ƒë·∫∑t l·ªãch
        await sendEmail(user.email, {
            patientName,
            date,
            time,
            symptoms
        }, "appointment");

        res.status(201).json({
            message: 'Y√™u c·∫ßu ƒë·∫∑t l·ªãch h·∫πn ƒë√£ ƒë∆∞·ª£c g·ª≠i, vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c nh·∫≠n.',
            appointment: newAppointment
        });

    } catch (error) {
        next(error);
    }
};

export const getPendingAppointments = async (req: Request, res: Response): Promise<void> => {
    try {
        const appointments = await Appointment.find({ status: "Pending" });
        res.status(200).json({ message: "Danh s√°ch l·ªãch h·∫πn c·∫ßn x·ª≠ l√Ω", data: appointments });
    } catch (error) {
        res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch l·ªãch h·∫πn", error });
    }
};

export const updateAppointmentStatus = async (req: Request, res: Response): Promise<void> => {
    try {
        const { id } = req.params;
        const { status } = req.body;

        if (!["Accepted", "Rejected"].includes(status)) {
            res.status(400).json({ message: "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá" });
            return;
        }

        const appointment = await Appointment.findByIdAndUpdate(id, { status }, { new: true });

        if (!appointment) {
            res.status(404).json({ message: "L·ªãch h·∫πn kh√¥ng t·ªìn t·∫°i" });
            return;
        }

        res.status(200).json({ message: `L·ªãch h·∫πn ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh ${status}`, data: appointment });
    } catch (error) {
        res.status(500).json({ message: "L·ªói khi c·∫≠p nh·∫≠t l·ªãch h·∫πn", error });
    }
};

export const assignDoctor = async (req: Request, res: Response): Promise<void> => {
    try {
        const { id } = req.params;
        const { doctorId } = req.body;

        if (!doctorId) {
            res.status(400).json({ message: "C·∫ßn ch·ªçn b√°c sƒ© ƒë·ªÉ g√°n l·ªãch h·∫πn" });
            return;
        }

        const appointment = await Appointment.findByIdAndUpdate(id, { doctorId, status: "Assigned" }, { new: true });

        if (!appointment) {
            res.status(404).json({ message: "L·ªãch h·∫πn kh√¥ng t·ªìn t·∫°i" });
            return;
        }

        res.status(200).json({ message: "ƒê√£ ch·ªâ ƒë·ªãnh b√°c sƒ©", data: appointment });
    } catch (error) {
        res.status(500).json({ message: "L·ªói khi g√°n b√°c sƒ©", error });
    }
};

// // Book appointment
// export const bookAppointment = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
//     try {
//         const userId = req.user?.id;
//         const { doctorId, date, time } = req.body;

//         if (!mongoose.Types.ObjectId.isValid(doctorId)) {
//             res.status(400).json({ message: "doctorId kh√¥ng h·ª£p l·ªá" });
//             return;
//         }

//         // ‚úÖ Ki·ªÉm tra xem l·ªãch kh√°m c√≥ t·ªìn t·∫°i kh√¥ng
//         const schedule = await Schedule.findOne({
//             doctorId,
//             "availableSlots.date": date,
//             "availableSlots.time": time,
//         });

//         if (!schedule) {
//             res.status(400).json({ message: "L·ªãch kh√°m c·ªßa b√°c sƒ© kh√¥ng c√≥ khung gi·ªù n√†y" });
//             return;
//         }

//         // ‚úÖ L·∫•y slot c·ª• th·ªÉ
//         const slotIndex = schedule.availableSlots.findIndex(slot =>
//             slot.date.toISOString() === new Date(date).toISOString() && slot.time === time
//         );

//         if (slotIndex === -1) {
//             res.status(400).json({ message: "Khung gi·ªù n√†y kh√¥ng t·ªìn t·∫°i trong l·ªãch kh√°m c·ªßa b√°c sƒ©" });
//             return;
//         }

//         if (schedule.availableSlots[slotIndex].isBooked) {
//             res.status(400).json({ message: "Khung gi·ªù n√†y ƒë√£ c√≥ ng∆∞·ªùi ƒë·∫∑t" });
//             return;
//         }

//         // ‚úÖ C·∫≠p nh·∫≠t `isBooked` th√†nh `true`
//         schedule.availableSlots[slotIndex].isBooked = true;
//         await schedule.save();

//         // ‚úÖ T·∫°o l·ªãch h·∫πn
//         const newAppointment = new Appointment({
//             doctorId,
//             userId,
//             date,
//             time,
//             status: AppointmentStatus.PENDING,
//         });

//         await newAppointment.save();

//         res.status(201).json({
//             message: 'Appointment booked successfully',
//             appointment: newAppointment,
//             updatedSchedule: schedule, // ‚úÖ Tr·∫£ v·ªÅ l·ªãch ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
//         });
//     } catch (error) {
//         next(error);
//     }
// };

// View all appointments
export const viewAllAppointments = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
        const appointments = await Appointment.find().populate('userId', 'username email').populate('doctorId', 'username email');
        res.status(200).json({
            message: 'Appointments retrieved successfully',
            data: appointments,
        });
    } catch (error) {
        next(error);
    }
};

// ROLE: NURSE
// Upate appointment
// export const updateAppointmentStatus = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
//     try {
//         const { id } = req.params;
//         const { status } = req.body;

//         if (![AppointmentStatus.ACCEPTED, AppointmentStatus.REJECTED].includes(status)) {
//             res.status(400).json({ message: 'Invalid status' });
//             return;
//         }

//         if (req.user?.role !== 'nurse') {
//             res.status(403).json({ message: 'Permission denied' });
//             return;
//         }

//         if (status === AppointmentStatus.REJECTED) {
//             await Appointment.findByIdAndDelete(id);
//             res.status(200).json({ message: 'Appointment has been removed' });
//             return;
//         }

//         const appointment = await Appointment.findById(id);
//         if (!appointment) {
//             res.status(404).json({ message: 'Appointment not found' });
//             return;
//         }

//         const user = await User.findById(appointment.userId);
//         if (!user) {
//             res.status(404).json({ message: 'User not found' });
//             return;
//         }

//         // update appointment status
//         appointment.status = AppointmentStatus.ACCEPTED;
//         appointment.patientName = user.username;
//         await appointment.save();

//         res.status(200).json({
//             message: 'Appointment accepted successfully',
//             data: appointment,
//         });
//     } catch (error) {
//         next(error);
//     }
// };
// get All appointments of all user
export const getUserAppointments = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
        const userId = req.user?.id;
        const userRole = req.user?.role;

        if (!userId) {
            res.status(403).json({ message: 'Permission denied' });
            return;
        }

        let filter = {};

        if (userRole === 'nurse') {

            filter = {};
        } else {
            // ‚úÖ N·∫øu l√† user, ch·ªâ l·∫•y l·ªãch h·∫πn c·ªßa ch√≠nh m√¨nh
            filter = { userId };
        }

        const appointments = await Appointment.find(filter)
            .populate('doctorId', 'username email')
            .populate('userId', 'username email')
            .sort({ date: -1, time: -1 });

        if (appointments.length === 0) {
            res.status(404).json({ message: 'Not found any appointment' });
            return;
        }

        res.status(200).json({
            message: 'Appointments retrieved successfully',
            data: appointments,
        });
    } catch (error) {
        next(error);
    }
};

export const getDetailAppointment = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
        const userId = req.user?.id;
        const userRole = req.user?.role;
        const { id } = req.params;

        if (!mongoose.Types.ObjectId.isValid(id)) {
            res.status(400).json({ message: 'Invalid appointment ID' });
            return;
        }

        if (!userId) {
            res.status(403).json({ message: 'Permission denied' });
            return;
        }

        // Get appointment by id
        const appointment = await Appointment.findById(id)
            .populate('doctorId', 'username email')
            .populate('userId', 'username email');

        if (!appointment) {
            res.status(404).json({ message: 'Not found any appointment' });
            return;
        }

        // If user is not nurse and not owner of appointment
        if (userRole !== 'nurse' && appointment.userId.toString() !== userId) {
            res.status(403).json({ message: 'Permission denied to get this appointment' });
            return;
        }

        res.status(200).json({
            message: 'Appointment retrieved successfully',
            data: appointment,
        });
    } catch (error) {
        next(error);
    }
};
export const cancelAppointment = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
        const userId = req.user?.id;
        const userRole = req.user?.role;
        const { id } = req.params;

        if (!mongoose.Types.ObjectId.isValid(id)) {
            res.status(400).json({ message: 'Invalid appointment ID' });
            return;
        }


        const appointment = await Appointment.findById(id);
        if (!appointment) {
            res.status(404).json({ message: 'Appointment not found' });
            return;
        }


        if (userRole !== 'nurse' && appointment.userId.toString() !== userId) {
            res.status(403).json({ message: 'You do not have permission to cancel this appointment' });
            return;
        }

        if (userRole !== 'nurse' && appointment.status !== AppointmentStatus.PENDING) {
            res.status(400).json({ message: 'You can only cancel appointments that are still pending' });
            return;
        }


        await Appointment.findByIdAndDelete(id);


        // await Schedule.findOneAndUpdate(
            // { doctorId: appointment.doctorId, "availableSlots.date": appointment.date, "availableSlots.time": appointment.time },
        //     { $set: { "availableSlots.$.isBooked": false } }
        // );

        res.status(200).json({
            message: 'Appointment cancelled successfully',
        });
    } catch (error) {
        next(error);
    }
};
